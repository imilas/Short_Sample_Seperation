{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/amir/mir/musicinformationretrieval.com\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "print(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1025, 79)\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "module 'librosa' has no attribute 'display'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-13-d9228a3111f6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mlibrosa\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspecshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mD\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m40000\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_axis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'linear'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;31m# plt.colorbar(format='%+2.0f dB')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Linear-frequency power spectrogram'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'librosa' has no attribute 'display'"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8bfc2d6668>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import librosa\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "filename= \"../t-sne/samples/snares/snare_02.mp3\"\n",
    "y, sr = librosa.load(filename,sr=40000)\n",
    "# Or generate \n",
    "tone = librosa.tone(4096, sr=40000, duration=1)\n",
    "y=tone\n",
    "D = librosa.amplitude_to_db(np.abs(librosa.stft(y)), ref=np.max)\n",
    "print(D.shape)\n",
    "plt.figure(figsize=(12,8))\n",
    "plt.subplot(1, 2, 1)\n",
    "librosa.display.specshow(D,sr=40000,y_axis='linear')\n",
    "# plt.colorbar(format='%+2.0f dB')\n",
    "plt.title('Linear-frequency power spectrogram')\n",
    "# Or on a logarithmic scale\n",
    "plt.subplot(1, 2, 2)\n",
    "librosa.display.specshow(D,sr=40000, y_axis='log')\n",
    "plt.colorbar(format='%+2.0f dB')\n",
    "plt.title('Log-frequency power spectrogram')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'loading'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-04c63bd6ee5e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpathlib\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mPath\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mloading\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfeature_functions\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mff\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'loading'"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import seaborn as sns\n",
    "import scipy, matplotlib.pyplot as plt\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "import loading as load\n",
    "import feature_functions as ff\n",
    "\n",
    "import imp\n",
    "import scipy\n",
    "import librosa\n",
    "import madmom\n",
    "a=load.loadAudioArrays()\n",
    "kick_signals=a[\"kicks\"]\n",
    "snare_signals=a[\"snares\"]\n",
    "clap_signals=a[\"claps\"]\n",
    "\n",
    "\n",
    "def fitFreq(signals,t=\"unknown_drum\",frameLen=1000,hopLen=4,num_feats=2):\n",
    "    hopLen=frameLen-1\n",
    "    def getFeat(x):\n",
    "        fs=madmom.audio.signal.FramedSignal(x, sample_rate=48000,\n",
    "            frame_size=frameLen,hop_size=hopLen)\n",
    "        feat=np.zeros(frameLen)\n",
    "        for frame in fs[0:4]:\n",
    "            X=np.absolute(scipy.fft(frame))\n",
    "            feat+=X\n",
    "            print(len(X))\n",
    "        return feat\n",
    "    onsets=[]\n",
    "    for s in signals:\n",
    "        features=getFeat(s)\n",
    "        onsets.append(features)\n",
    "    df=pd.DataFrame(onsets)\n",
    "    feat_cols=[ 'onset'+str(i) for i in range(df.shape[1])]\n",
    "    df.columns=feat_cols\n",
    "    df[\"label\"]=t\n",
    "    return df\n",
    "\n",
    "df=pd.DataFrame()\n",
    "imp.reload(ff)\n",
    "for key,signals in a.items():\n",
    "    print(\"features from %s\"%key)\n",
    "    # chunk=ff.fitPolyWave(signals)\n",
    "    chunk=fitFreq(signals,t=key,num_feats=20)\n",
    "    df=pd.concat([df,chunk])\n",
    "\n",
    "df=df.fillna(0)\n",
    "#find most useless features\n",
    "#df.astype(bool).sum(axis=0).sort_values()\n",
    "\n",
    "rndperm = np.random.permutation(df.shape[0])\n",
    "#t-sne\n",
    "ff.plotTSNE(df,perp=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "'Python Interactive'",
   "language": "python",
   "name": "89aaa044-9b66-402c-83c7-889f88e4f2f0"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
